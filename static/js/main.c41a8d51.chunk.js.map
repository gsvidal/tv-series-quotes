{"version":3,"sources":["components/Quote.js","components/Selector.js","assets/smallville.png","assets/breakingbad.png","App.js","reportWebVitals.js","index.js"],"names":["ContainerQuote","styled","div","Quote","phrase","author_id","content","name","quote","author","Container","Button","button","props","series","ButtonBack","Selector","setSeries","useState","setPhrase","lastRandom","setLastRandom","urlAPI","fetchAPI","a","fetch","api","json","result","randomSmallville","Math","ceil","random","length","console","log","replace","useEffect","onClick","ContainerMain","btnImgSmallville","btnImgBreakingBad","App","handleClick","event","target","value","className","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAGMA,EAAiBC,IAAOC,IAAV,gtBAqDLC,EArBD,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEd,OAAIA,EAEF,cAACJ,EAAD,UACGI,EAAOC,UAER,qCACE,6BAAKD,EAAOE,UACZ,4BAAIF,EAAOC,UAAUE,UAGvB,qCACE,6BAAKH,EAAOI,QACZ,4BAAIJ,EAAOK,cAZE,MCjCfC,EAAYT,IAAOC,IAAV,+IAQTS,EAASV,IAAOW,OAAV,wtBAYU,SAAAC,GAAK,MAAsB,eAAjBA,EAAMC,OAA0B,+EAAiF,8EAU3IC,EAAad,IAAOW,OAAV,8KA0EDI,EAjEE,SAAC,GAAyB,IAAxBF,EAAuB,EAAvBA,OAAQG,EAAe,EAAfA,UAGzB,EAA8BC,mBAAS,IAAvC,mBAAQd,EAAR,KAAgBe,EAAhB,KAEA,EAAsCD,mBAAS,GAA/C,mBAAQE,EAAR,KAAoBC,EAApB,KAOMC,EAAoB,eAAXR,EAJU,sDAEC,uDAKpBS,EAAQ,uCAAG,gCAAAC,EAAA,sEACCC,MAAMH,GADP,cACXI,EADW,gBAEIA,EAAIC,OAFR,UAEXC,EAFW,OAGD,eAAXd,EAHY,wBAITe,EAAmBC,KAAKC,KAAKD,KAAKE,SAASJ,EAAOK,QACtDC,QAAQC,IAAIP,EAAOK,QAChBb,IAAeS,IACbA,IAAqBD,EAAOK,OAC7BJ,IAEAA,KAVS,UAaDJ,MAAMH,EAAOc,QAAQ,SAAS,WAAxB,UAAwCP,EAAxC,MAbL,eAabH,EAba,iBAcEA,EAAIC,OAdN,QAcbC,EAda,OAebT,EAAUS,GACVP,EAAcQ,GAhBD,wBAkBbV,EAAUS,EAAO,IAlBJ,4CAAH,qDAuBdS,qBAAU,WACRd,MACA,IAOF,OACE,eAACb,EAAD,WACE,cAAC,EAAD,CACEN,OAAQA,IAEV,cAACO,EAAD,CACEG,OAAQA,EACRwB,QAASf,EAFX,uBAMA,cAACR,EAAD,CACEuB,QAhBkB,WACtBrB,EAAU,KAcR,sBCrGS,MAA0B,uCCA1B,MAA0B,wCCMnCP,EAAYT,IAAOC,IAAV,qLASTqC,EAAgBtC,IAAOC,IAAV,kOAYbS,EAASV,IAAOW,OAAV,20BAgBU4B,EAaAC,GAgDPC,MAvCf,WAEE,MAA8BxB,mBAAS,IAAvC,mBAAQJ,EAAR,KAAgBG,EAAhB,KAEM0B,EAAc,SAACC,GACnB3B,EAAU2B,EAAMC,OAAOC,QAGzB,OACE,cAAC,EAAD,UACIhC,EAEF,cAAC,EAAD,CACEA,OAAQA,EACRG,UAAWA,IAGb,eAACsB,EAAD,WACE,kDACA,6EACA,cAAC,EAAD,CACED,QAASK,EACTG,MAAM,aACNC,UAAU,uBAGZ,cAAC,EAAD,CACET,QAASK,EACTG,MAAM,cACNC,UAAU,yBAGZ,oBAAGA,UAAU,UAAb,oCAA8C,mBAAGC,KAAK,8BAA8BH,OAAO,SAA7C,6BCrFvCI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c41a8d51.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from '@emotion/styled'\r\n\r\nconst ContainerQuote = styled.div`\r\n  max-width: 800px;\r\n  padding: 3rem;\r\n  background-color: #ffffffdd;\r\n  border: 3px solid grey;\r\n  border-radius: 10px;\r\n  font-family: 'Dancing Script', cursive;\r\n  box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px, rgba(0, 0, 0, 0.22) 0px 15px 12px;\r\n  \r\n  h1 {\r\n    padding-left: 2rem;\r\n    font-size: 2.5rem;\r\n    position: relative;\r\n    &::before {\r\n      font-family: Arial, Helvetica, sans-serif;\r\n      content: open-quote;\r\n      font-size: 7rem;\r\n      position: absolute;\r\n      top: -3.2rem;\r\n      left: -2.2rem;\r\n    }\r\n  }\r\n\r\n  p {\r\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n    font-size: 2rem;\r\n    text-align: right;\r\n    color: #aaa;\r\n    margin-top: 3rem;\r\n  }\r\n`;\r\n\r\nconst Quote = ({phrase}) => {\r\n\r\n  if(!phrase) return null;\r\n  return(\r\n    <ContainerQuote>\r\n      {phrase.author_id \r\n      ? \r\n      <>\r\n        <h1>{phrase.content}</h1>\r\n        <p>{phrase.author_id.name}</p>\r\n      </>\r\n      :\r\n      <>\r\n        <h1>{phrase.quote}</h1>\r\n        <p>{phrase.author}</p>\r\n      </>\r\n      }\r\n    </ContainerQuote>\r\n  );\r\n}\r\n\r\nexport default Quote;","import React, { useState, useEffect } from 'react';\r\nimport Quote from './Quote';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 1rem;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  width: 240px;\r\n  background: -webkit-linear-gradient(top left, #007d35 0%, #627d35 50%, #0f574e 100%);\r\n  background-size: 240px; \r\n  font-family: Arial, Helvetica, sans-serif;\r\n  margin-top: 3rem;\r\n  padding: 1rem;\r\n  font-size: 2rem;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  color: white;\r\n  border: 1px solid white;\r\n  background-image: ${props => (props.series === \"smallville\" ? \"-webkit-radial-gradient(circle, rgba(8,0,255,1) 53%, rgba(252,70,70,1) 100%)\" : \"-webkit-linear-gradient(top left, #007d35 0%, #627d35 50%, #0f574e 100%)\")};\r\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;\r\n  transition: transform 0.2s ease;\r\n  transition: box-shadow 0.2s ease;\r\n  &:active {\r\n    opacity: 0.9;\r\n    transform: scale(0.95);\r\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 5px, rgba(0, 0, 0, 0.23) 0px 3px 5px;\r\n  }\r\n`;\r\nconst ButtonBack = styled.button`\r\n  padding: .5rem 2rem;\r\n  margin-top: 5rem;\r\n  font-size: 1.2rem;\r\n  border: 1px solid white;\r\n  border-radius: 5px;\r\n  background-color: #ecf; \r\n`;\r\n\r\nconst Selector = ({series, setSeries}) => {\r\n\r\n  // Quotes state\r\n  const [ phrase, setPhrase ] = useState({});\r\n\r\n  const [ lastRandom, setLastRandom ] = useState(0);\r\n\r\n  // Asigning which tv series will retrieve\r\n  const urlAPISmallville = \"https://api-smallville.herokuapp.com/api/v1/quotes/\";\r\n\r\n  const urlAPIBreakingBad = \"https://breaking-bad-quotes.herokuapp.com/v1/quotes/\";\r\n\r\n  const urlAPI = series === \"smallville\" ? urlAPISmallville : urlAPIBreakingBad ;\r\n\r\n  // Async await\r\n  const fetchAPI = async function() {\r\n    let api = await fetch(urlAPI);\r\n    let result = await api.json();\r\n    if(series === \"smallville\") {\r\n      let randomSmallville = Math.ceil(Math.random()*result.length);\r\n      console.log(result.length)\r\n      if(lastRandom === randomSmallville) {\r\n        if(randomSmallville === result.length) {\r\n          randomSmallville--;\r\n        } else {\r\n          randomSmallville++;\r\n        }\r\n      }\r\n      api = await fetch(urlAPI.replace(\"quotes\",\"quotesp\") + `${randomSmallville}/`);\r\n      result = await api.json();\r\n      setPhrase(result); \r\n      setLastRandom(randomSmallville)\r\n    } else {\r\n      setPhrase(result[0]); \r\n    }\r\n  }\r\n\r\n  // Loads a phrase since the firts App mounting\r\n  useEffect(() => {\r\n    fetchAPI();\r\n  },[])\r\n\r\n  // Handle back button click\r\n  const handleClickBack = () => {\r\n    setSeries(\"\");\r\n  }  \r\n\r\n  return(\r\n    <Container>\r\n      <Quote \r\n        phrase={phrase}\r\n      />\r\n      <Button \r\n        series={series}\r\n        onClick={fetchAPI}\r\n      >\r\n          Get quote\r\n      </Button>\r\n      <ButtonBack\r\n        onClick={handleClickBack}\r\n      >Back</ButtonBack>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Selector;","export default __webpack_public_path__ + \"static/media/smallville.37709fa2.png\";","export default __webpack_public_path__ + \"static/media/breakingbad.fe978329.png\";","import { useState } from 'react';\nimport styled from '@emotion/styled';\nimport Selector from './components/Selector';\nimport btnImgSmallville from './assets/smallville.png';\nimport btnImgBreakingBad from './assets/breakingbad.png';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem;\n  width: 100%;\n  min-height: 100vh;\n`;\nconst ContainerMain = styled.div`\n  text-align: center;\n  h1 {\n    font-size: 5rem;\n    margin-bottom: 8rem;\n    font-family: 'Shadows Into Light Two', cursive;\n  }\n  h2 {\n    font-size: 2rem;\n    margin-bottom: 2rem;\n  }\n`;\nconst Button = styled.button`\n  width: 280px;\n  height: 200px;\n  padding: 1rem;\n  margin: 1rem;\n  font-size: 2rem;\n  border: 1px solid #ccc;\n  border-radius: 6px;\n  color: black;\n  cursor: pointer;\n  opacity: 0.5;\n  transition: transform .1s linear;\n  &:hover {\n    opacity: 1;\n  }\n  &.button__smallville {\n    background: url(${btnImgSmallville}) center/cover no-repeat;\n    background-size: 135%;\n    transition: background-size .5s linear;\n    &:hover {\n      background-size: 180%;\n    }\n    &.disabled {\n      opacity: 0.2;\n      transform: scale(1);\n      cursor: initial;\n    }\n  }\n  &.button__breaking-bad {\n    background: url(${btnImgBreakingBad}) center/cover no-repeat;\n    transition: background-size 1.5s ease;background-size: 145%;\n    transition: background-size .5s linear;\n    &:hover {\n      background-size: 180%;\n    }\n  }\n`;\n\nfunction App() {\n\n  const [ series, setSeries ] = useState(\"\"); \n\n  const handleClick = (event) => {\n    setSeries(event.target.value);\n  }\n\n  return (\n    <Container>\n      { series \n      ?\n      <Selector \n        series={series}\n        setSeries={setSeries}\n      />\n      :\n      <ContainerMain>\n        <h1>TV SERIES QUOTES</h1>\n        <h2>Select your favourite series to get Quotes!</h2>\n        <Button\n          onClick={handleClick}\n          value=\"smallville\"\n          className=\"button__smallville\"\n        >\n        </Button>\n        <Button\n          onClick={handleClick}\n          value=\"breakingbad\"\n          className=\"button__breaking-bad\"\n        >\n        </Button>\n        <p className=\"credits\">Smallville API made by <a href=\"https://github.com/francoxr\" target=\"_blank\">Franco</a></p>\n      </ContainerMain>\n      }\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}